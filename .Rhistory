ncol = length(shapeLayers)*length(test_biog)))
View(out_biogeo)
results_i <- results_SpeGeo
results_i <- cbind(results_SpeGeo, results_bracatus)
out_biogeo <- list()
out_biogeo[[i]] <- results_i
View(out_biogeo)
out_biogeo <- list()
sf::sf_use_s2(FALSE)
data_base <- as.data.frame(data_base)
#Extraer columnas de especie y coordenadas de la base de datos de registros de presencia
pts <- data_base[, c(col_sp, col_lon, col_lat)]
rm(data_base);gc()
# Loop que clasifica cada capa shape que fue cargado
for(i in 1:length(shapeLayers)){
if("speciesGeo" %in% test_biog){
shp_nm <- abbreviate(names(shapeLayers)[i])
nm <- paste0("SpGeo", ".", shp_nm)
#extraer de la lista de shapefiles el indice i
shapeLayers_i <- shapeLayers[[i]]
polynames_i <- polynames[i]
# extraer poligonos en donde caen los registros de presencia
shp_ref <- shapeLayers_i[gen.st.points(pts, collon = col_lon, collat = col_lat), ]
# darle nombres al data frame de la base de datos aceptados por species geocoder
colnames(pts) <- c("species", "decimalLongitude", "decimalLatitude")
# clasificar los puntos en los poligonos del shapefile de referencia usando una frecuencia de
# 1-pval en terminos de porcentaje
sp.class <- SpGeoCod(x = pts, y = as_Spatial(shp_ref), areanames = polynames_i,
occ.thresh =  (1-biog_details["pval"])*100)
# extraer aquellos poligonos en donde quedaron clasificados los registros
geocode <- sp.class$spec_table
geocode <- colnames(geocode)[which(geocode[1, ] != 0)]
# Extraer la clasificación de cada registro en el poligono
samples <- sp.class$samples[, "homepolygon"]
# Transformar la clasificación: aquellos registros clasificados darle valor de 0,
# aquellos que no fueron clasificados dado que estan dentro del margen de error
# darle valor 1
geocode_samples <- rep(NA, length(samples))
for(x in 1:length(geocode)){
geocode_x <- which(samples == geocode[x])
geocode_samples[geocode_x] <- 0
}
geocode_samples[is.na(geocode_samples)] <- 1
# Crear tabla de resultados de speciesGeocodeR
results_SpeGeo <- data.frame(geocode_samples)
colnames(results_SpeGeo) <- nm
# agregar al shapefile una columna que identifique cada poligono como anomalo o no
shp_polyname_vect <- st_drop_geometry(shp_ref) %>% dplyr::pull(polynames_i)
shp_ref[, nm] <- shp_polyname_vect %in% geocode
}
if("bracatus" %in% test_biog){
if(!("speciesGeo" %in% test_biog) & !("IaVH" %in% test_biog)){
stop("Si desea correr bracatus es necesario que esten activos alguno de los dos metodos de
clasificación de puntos inicial: 'speciesGeo' o 'IaVH'")
}
shp_ref_sp <- shp_ref %>% as_Spatial()
logic_ref <- shp_ref_sp@data[ , nm] %>% unique()
if(length(logic_ref) => 2){
range_map <- rangeMaps(range = shp_ref_sp, biogeo = nm, native = T, alien = F)
signals <- signalCalculation (ref_reg = range_map, pts = pts, biogeo = F)
acc <- accuracy (signals) %>% dplyr::select(accuracy)
}else{
acc <- data.frame(rep(1, nrow(pts)))
}
results_bracatus <- acc
colnames(results_bracatus) <- paste0("bRa", ".", shp_nm)
}
# compilar resultados segun la categoria de test desarollado
if(exists("results_SpeGeo") & !exists("results_bracatus")){
results_i <- results_SpeGeo
}else if(exists("results_SpeGeo") & exists("results_bracatus")){
results_i <- cbind(results_SpeGeo, results_bracatus)
}
out_biogeo[[i]] <- results_i
}
length(logic_ref) => 2
# Loop que clasifica cada capa shape que fue cargado
for(i in 1:length(shapeLayers)){
if("speciesGeo" %in% test_biog){
shp_nm <- abbreviate(names(shapeLayers)[i])
nm <- paste0("SpGeo", ".", shp_nm)
#extraer de la lista de shapefiles el indice i
shapeLayers_i <- shapeLayers[[i]]
polynames_i <- polynames[i]
# extraer poligonos en donde caen los registros de presencia
shp_ref <- shapeLayers_i[gen.st.points(pts, collon = col_lon, collat = col_lat), ]
# darle nombres al data frame de la base de datos aceptados por species geocoder
colnames(pts) <- c("species", "decimalLongitude", "decimalLatitude")
# clasificar los puntos en los poligonos del shapefile de referencia usando una frecuencia de
# 1-pval en terminos de porcentaje
sp.class <- SpGeoCod(x = pts, y = as_Spatial(shp_ref), areanames = polynames_i,
occ.thresh =  (1-biog_details["pval"])*100)
# extraer aquellos poligonos en donde quedaron clasificados los registros
geocode <- sp.class$spec_table
geocode <- colnames(geocode)[which(geocode[1, ] != 0)]
# Extraer la clasificación de cada registro en el poligono
samples <- sp.class$samples[, "homepolygon"]
# Transformar la clasificación: aquellos registros clasificados darle valor de 0,
# aquellos que no fueron clasificados dado que estan dentro del margen de error
# darle valor 1
geocode_samples <- rep(NA, length(samples))
for(x in 1:length(geocode)){
geocode_x <- which(samples == geocode[x])
geocode_samples[geocode_x] <- 0
}
geocode_samples[is.na(geocode_samples)] <- 1
# Crear tabla de resultados de speciesGeocodeR
results_SpeGeo <- data.frame(geocode_samples)
colnames(results_SpeGeo) <- nm
# agregar al shapefile una columna que identifique cada poligono como anomalo o no
shp_polyname_vect <- st_drop_geometry(shp_ref) %>% dplyr::pull(polynames_i)
shp_ref[, nm] <- shp_polyname_vect %in% geocode
}
if("bracatus" %in% test_biog){
if(!("speciesGeo" %in% test_biog) & !("IaVH" %in% test_biog)){
stop("Si desea correr bracatus es necesario que esten activos alguno de los dos metodos de
clasificación de puntos inicial: 'speciesGeo' o 'IaVH'")
}
shp_ref_sp <- shp_ref %>% as_Spatial()
logic_ref <- shp_ref_sp@data[ , nm] %>% unique()
if(length(logic_ref) >= 2){
range_map <- rangeMaps(range = shp_ref_sp, biogeo = nm, native = T, alien = F)
signals <- signalCalculation (ref_reg = range_map, pts = pts, biogeo = F)
acc <- accuracy (signals) %>% dplyr::select(accuracy)
}else{
acc <- data.frame(rep(1, nrow(pts)))
}
results_bracatus <- acc
colnames(results_bracatus) <- paste0("bRa", ".", shp_nm)
}
# compilar resultados segun la categoria de test desarollado
if(exists("results_SpeGeo") & !exists("results_bracatus")){
results_i <- results_SpeGeo
}else if(exists("results_SpeGeo") & exists("results_bracatus")){
results_i <- cbind(results_SpeGeo, results_bracatus)
}
out_biogeo[[i]] <- results_i
}
data_base = spx
out_biogeo <- list()
sf::sf_use_s2(FALSE)
data_base <- as.data.frame(data_base)
#Extraer columnas de especie y coordenadas de la base de datos de registros de presencia
pts <- data_base[, c(col_sp, col_lon, col_lat)]
# Loop que clasifica cada capa shape que fue cargado
for(i in 1:length(shapeLayers)){
if("speciesGeo" %in% test_biog){
shp_nm <- abbreviate(names(shapeLayers)[i])
nm <- paste0("SpGeo", ".", shp_nm)
#extraer de la lista de shapefiles el indice i
shapeLayers_i <- shapeLayers[[i]]
polynames_i <- polynames[i]
# extraer poligonos en donde caen los registros de presencia
shp_ref <- shapeLayers_i[gen.st.points(pts, collon = col_lon, collat = col_lat), ]
# darle nombres al data frame de la base de datos aceptados por species geocoder
colnames(pts) <- c("species", "decimalLongitude", "decimalLatitude")
# clasificar los puntos en los poligonos del shapefile de referencia usando una frecuencia de
# 1-pval en terminos de porcentaje
sp.class <- SpGeoCod(x = pts, y = as_Spatial(shp_ref), areanames = polynames_i,
occ.thresh =  (1-biog_details["pval"])*100)
# extraer aquellos poligonos en donde quedaron clasificados los registros
geocode <- sp.class$spec_table
geocode <- colnames(geocode)[which(geocode[1, ] != 0)]
# Extraer la clasificación de cada registro en el poligono
samples <- sp.class$samples[, "homepolygon"]
# Transformar la clasificación: aquellos registros clasificados darle valor de 0,
# aquellos que no fueron clasificados dado que estan dentro del margen de error
# darle valor 1
geocode_samples <- rep(NA, length(samples))
for(x in 1:length(geocode)){
geocode_x <- which(samples == geocode[x])
geocode_samples[geocode_x] <- 0
}
geocode_samples[is.na(geocode_samples)] <- 1
# Crear tabla de resultados de speciesGeocodeR
results_SpeGeo <- data.frame(geocode_samples)
colnames(results_SpeGeo) <- nm
# agregar al shapefile una columna que identifique cada poligono como anomalo o no
shp_polyname_vect <- st_drop_geometry(shp_ref) %>% dplyr::pull(polynames_i)
shp_ref[, nm] <- shp_polyname_vect %in% geocode
}
if("bracatus" %in% test_biog){
if(!("speciesGeo" %in% test_biog) & !("IaVH" %in% test_biog)){
stop("Si desea correr bracatus es necesario que esten activos alguno de los dos metodos de
clasificación de puntos inicial: 'speciesGeo' o 'IaVH'")
}
shp_ref_sp <- shp_ref %>% as_Spatial()
logic_ref <- shp_ref_sp@data[ , nm] %>% unique()
if(length(logic_ref) >= 2){
range_map <- rangeMaps(range = shp_ref_sp, biogeo = nm, native = T, alien = F)
signals <- signalCalculation (ref_reg = range_map, pts = pts, biogeo = F)
acc <- accuracy (signals) %>% dplyr::select(accuracy)
}else{
acc <- data.frame(rep(1, nrow(pts)))
}
results_bracatus <- acc
colnames(results_bracatus) <- paste0("bRa", ".", shp_nm)
}
# compilar resultados segun la categoria de test desarollado
if(exists("results_SpeGeo") & !exists("results_bracatus")){
results_i <- results_SpeGeo
}else if(exists("results_SpeGeo") & exists("results_bracatus")){
results_i <- cbind(results_SpeGeo, results_bracatus)
}
out_biogeo[[i]] <- results_i
}
View(pts)
out_biogeo <- list()
sf::sf_use_s2(FALSE)
data_base <- as.data.frame(data_base)
#Extraer columnas de especie y coordenadas de la base de datos de registros de presencia
pts <- data_base[, c(col_sp, col_lon, col_lat)]
View(pts)
out_biogeo <- list()
sf::sf_use_s2(FALSE)
data_base <- as.data.frame(data_base)
#Extraer columnas de especie y coordenadas de la base de datos de registros de presencia
pts <- data_base[, c(col_sp, col_lon, col_lat)]
# Loop que clasifica cada capa shape que fue cargado
for(i in 1:length(shapeLayers)){
print(paste0("shapelayer = ", i))
if("speciesGeo" %in% test_biog){
shp_nm <- abbreviate(names(shapeLayers)[i])
nm <- paste0("SpGeo", ".", shp_nm)
#extraer de la lista de shapefiles el indice i
shapeLayers_i <- shapeLayers[[i]]
polynames_i <- polynames[i]
# darle nombres al data frame de la base de datos aceptados por species geocoder
colnames(pts) <- c("species", "decimalLongitude", "decimalLatitude")
# extraer poligonos en donde caen los registros de presencia
shp_ref <- shapeLayers_i[gen.st.points(pts, collon = "decimalLongitude",
collat = "decimalLatitude"), ]
# clasificar los puntos en los poligonos del shapefile de referencia usando una frecuencia de
# 1-pval en terminos de porcentaje
sp.class <- SpGeoCod(x = pts, y = as_Spatial(shp_ref), areanames = polynames_i,
occ.thresh =  (1-biog_details["pval"])*100)
# extraer aquellos poligonos en donde quedaron clasificados los registros
geocode <- sp.class$spec_table
geocode <- colnames(geocode)[which(geocode[1, ] != 0)]
# Extraer la clasificación de cada registro en el poligono
samples <- sp.class$samples[, "homepolygon"]
# Transformar la clasificación: aquellos registros clasificados darle valor de 0,
# aquellos que no fueron clasificados dado que estan dentro del margen de error
# darle valor 1
geocode_samples <- rep(NA, length(samples))
for(x in 1:length(geocode)){
geocode_x <- which(samples == geocode[x])
geocode_samples[geocode_x] <- 0
}
geocode_samples[is.na(geocode_samples)] <- 1
# Crear tabla de resultados de speciesGeocodeR
results_SpeGeo <- data.frame(geocode_samples)
colnames(results_SpeGeo) <- nm
# agregar al shapefile una columna que identifique cada poligono como anomalo o no
shp_polyname_vect <- st_drop_geometry(shp_ref) %>% dplyr::pull(polynames_i)
shp_ref[, nm] <- shp_polyname_vect %in% geocode
}
if("bracatus" %in% test_biog){
if(!("speciesGeo" %in% test_biog) & !("IaVH" %in% test_biog)){
stop("Si desea correr bracatus es necesario que esten activos alguno de los dos metodos de
clasificación de puntos inicial: 'speciesGeo' o 'IaVH'")
}
shp_ref_sp <- shp_ref %>% as_Spatial()
logic_ref <- shp_ref_sp@data[ , nm] %>% unique()
if(length(logic_ref) >= 2){
range_map <- rangeMaps(range = shp_ref_sp, biogeo = nm, native = T, alien = F)
signals <- signalCalculation (ref_reg = range_map, pts = pts, biogeo = F)
acc <- accuracy (signals) %>% dplyr::select(accuracy)
}else{
acc <- data.frame(rep(1, nrow(pts)))
}
results_bracatus <- acc
colnames(results_bracatus) <- paste0("bRa", ".", shp_nm)
}
# compilar resultados segun la categoria de test desarollado
if(exists("results_SpeGeo") & !exists("results_bracatus")){
results_i <- results_SpeGeo
}else if(exists("results_SpeGeo") & exists("results_bracatus")){
results_i <- cbind(results_SpeGeo, results_bracatus)
}
out_biogeo[[i]] <- results_i
}
View(out_biogeo)
a <- rbindlist(out_biogeo)
View(a)
a <- cbindlist(out_biogeo)
a <- dplyr::bind_cols(out_biogeo)
View(a)
out_biogeo <- out_biogeo[[-2]]
# 4. aplicar modulo biogeografico
# leer las capas biogeograficas que se desean trabajar
hybas3 <- sf::read_sf("biogeographic/hybas_sa_lev03_v1c.shp")
a <- list(hybas3, hybas5); names(a) <- c("hybas3", "hybas5")
rm(a)
# 4. aplicar modulo biogeografico
# leer las capas biogeograficas que se desean trabajar
hybas3 <- sf::read_sf("biogeographic/hybas_sa_lev03_v1c.shp")
a <- list(hybas3); names(a) <- c("hybas3")
c("HYBAS_ID")
polynames = c("HYBAS_ID")
shapeLayers = a
out_biogeo <- list()
sf::sf_use_s2(FALSE)
data_base <- as.data.frame(data_base)
#Extraer columnas de especie y coordenadas de la base de datos de registros de presencia
pts <- data_base[, c(col_sp, col_lon, col_lat)]
# Loop que clasifica cada capa shape que fue cargado
for(i in 1:length(shapeLayers)){
print(paste0("shapelayer = ", i))
if("speciesGeo" %in% test_biog){
shp_nm <- abbreviate(names(shapeLayers)[i])
nm <- paste0("SpGeo", ".", shp_nm)
#extraer de la lista de shapefiles el indice i
shapeLayers_i <- shapeLayers[[i]]
polynames_i <- polynames[i]
# darle nombres al data frame de la base de datos aceptados por species geocoder
colnames(pts) <- c("species", "decimalLongitude", "decimalLatitude")
# extraer poligonos en donde caen los registros de presencia
shp_ref <- shapeLayers_i[gen.st.points(pts, collon = "decimalLongitude",
collat = "decimalLatitude"), ]
# clasificar los puntos en los poligonos del shapefile de referencia usando una frecuencia de
# 1-pval en terminos de porcentaje
sp.class <- SpGeoCod(x = pts, y = as_Spatial(shp_ref), areanames = polynames_i,
occ.thresh =  (1-biog_details["pval"])*100)
# extraer aquellos poligonos en donde quedaron clasificados los registros
geocode <- sp.class$spec_table
geocode <- colnames(geocode)[which(geocode[1, ] != 0)]
# Extraer la clasificación de cada registro en el poligono
samples <- sp.class$samples[, "homepolygon"]
# Transformar la clasificación: aquellos registros clasificados darle valor de 0,
# aquellos que no fueron clasificados dado que estan dentro del margen de error
# darle valor 1
geocode_samples <- rep(NA, length(samples))
for(x in 1:length(geocode)){
geocode_x <- which(samples == geocode[x])
geocode_samples[geocode_x] <- 0
}
geocode_samples[is.na(geocode_samples)] <- 1
# Crear tabla de resultados de speciesGeocodeR
results_SpeGeo <- data.frame(geocode_samples)
colnames(results_SpeGeo) <- nm
# agregar al shapefile una columna que identifique cada poligono como anomalo o no
shp_polyname_vect <- st_drop_geometry(shp_ref) %>% dplyr::pull(polynames_i)
shp_ref[, nm] <- shp_polyname_vect %in% geocode
}
if("bracatus" %in% test_biog){
if(!("speciesGeo" %in% test_biog) & !("IaVH" %in% test_biog)){
stop("Si desea correr bracatus es necesario que esten activos alguno de los dos metodos de
clasificación de puntos inicial: 'speciesGeo' o 'IaVH'")
}
shp_ref_sp <- shp_ref %>% as_Spatial()
logic_ref <- shp_ref_sp@data[ , nm] %>% unique()
if(length(logic_ref) >= 2){
range_map <- rangeMaps(range = shp_ref_sp, biogeo = nm, native = T, alien = F)
signals <- signalCalculation (ref_reg = range_map, pts = pts, biogeo = F)
acc <- accuracy (signals) %>% dplyr::select(accuracy)
}else{
acc <- data.frame(rep(1, nrow(pts)))
}
results_bracatus <- acc
colnames(results_bracatus) <- paste0("bRa", ".", shp_nm)
}
# compilar resultados segun la categoria de test desarollado
if(exists("results_SpeGeo") & !exists("results_bracatus")){
results_i <- results_SpeGeo
}else if(exists("results_SpeGeo") & exists("results_bracatus")){
results_i <- cbind(results_SpeGeo, results_bracatus)
}
out_biogeo[[i]] <- results_i
}
View(out_biogeo)
a <- dplyr::bind_cols(out_biogeo)
View(a)
# Cargar funciones de los modulos
source("R/funciones_limpieza.R")
library(data.table)
library(sf)
library(terra)
# 1. cargar registros
load("registros/subset16.RData")
spx <- subset16[acceptedNameUsage == "Acacia decurrens"]
rm(subset16);gc()
# leer las capas biogeograficas que se desean trabajar
hybas3 <- sf::read_sf("biogeographic/hybas_sa_lev03_v1c.shp")
hybas5 <- sf::read_sf("biogeographic/hybas_sa_lev05_v1c.shp")
# generar una lista y darle nombre a cada capa en la lista
a <- list(hybas3); names(a) <- c("hybas3", "hybas5")
# generar una lista y darle nombre a cada capa en la lista
a <- list(hybas3, hybas5); names(a) <- c("hybas3", "hybas5")
View(a)
spx_biog <- do.biogeographic.label(data_base = spx, col_sp = "acceptedNameUsage", col_lon = "lon",
col_lat = "lat", shapeLayers = list_bio,
polynames = c("HYBAS_ID", "HYBAS_ID"),
test_biog = c("bracatus", "speciesGeo"),
biog_details = c("pval" = 0.95))
rm(a)
# leer las capas biogeograficas que se desean trabajar
hybas3 <- sf::read_sf("biogeographic/hybas_sa_lev03_v1c.shp")
hybas5 <- sf::read_sf("biogeographic/hybas_sa_lev05_v1c.shp")
# generar una lista y darle nombre a cada capa en la lista
list_bio <- list(hybas3, hybas5); names(list_bio) <- c("hybas3", "hybas5")
spx_biog <- do.biogeographic.label(data_base = spx, col_sp = "acceptedNameUsage", col_lon = "lon",
col_lat = "lat", shapeLayers = list_bio,
polynames = c("HYBAS_ID", "HYBAS_ID"),
test_biog = c("bracatus", "speciesGeo"),
biog_details = c("pval" = 0.95))
View(spx_biog)
View(spx_biog)
View(spx)
a <- cbind(spx[, c("lon", "lat")], spx_biog)
write.csv(a, "a.csv", row.names = F)
View(a)
# Cargar funciones de los modulos
source("R/funciones_limpieza.R")
library(data.table)
library(sf)
library(terra)
# 1. cargar registros
load("registros/subset16.RData")
spx <- subset16[acceptedNameUsage == "Acacia decurrens"]
rm(subset16);gc()
# leer las capas biogeograficas que se desean trabajar
hybas3 <- sf::read_sf("biogeographic/hybas_sa_lev03_v1c.shp")
hybas5 <- sf::read_sf("biogeographic/hybas_sa_lev04_v1c.shp")
hybas5 <- sf::read_sf("biogeographic/hybas_sa_lev05_v1c.shp")
bior <- sf::read_sf("biogeographic/bior164.shp")
# generar una lista y darle nombre a cada capa en la lista
list_bio <- list(hybas3, hybas5, bior); names(list_bio) <- c("hybas3", "hybas5", "bior")
spx_biog <- do.biogeographic.label(data_base = spx, col_sp = "acceptedNameUsage", col_lon = "lon",
col_lat = "lat", shapeLayers = list_bio,
polynames = c("HYBAS_ID", "HYBAS_ID"),
test_biog = c("bracatus", "speciesGeo"),
biog_details = c("pval" = 0.95))
library(data.table)
library(sf)
library(terra)
library(speciesgeocodeR)
library(bRacatus)
library(dplyr)
spx_biog <- do.biogeographic.label(data_base = spx, col_sp = "acceptedNameUsage", col_lon = "lon",
col_lat = "lat", shapeLayers = list_bio,
polynames = c("HYBAS_ID", "HYBAS_ID"),
test_biog = c("bracatus", "speciesGeo"),
biog_details = c("pval" = 0.95))
data_base = spx
col_sp = "acceptedNameUsage"
col_lon = "lon"
col_lat = "lat"
shapeLayers = list_bio
names(bior)
(bior
(bior
)
bior
spx_biog <- do.biogeographic.label(data_base = spx, col_sp = "acceptedNameUsage", col_lon = "lon",
col_lat = "lat", shapeLayers = list_bio,
polynames = c("HYBAS_ID", "HYBAS_ID", "BIOME_NAME "),
test_biog = c("bracatus", "speciesGeo"),
biog_details = c("pval" = 0.95))
spx_biog <- do.biogeographic.label(data_base = spx, col_sp = "acceptedNameUsage", col_lon = "lon",
col_lat = "lat", shapeLayers = list_bio,
polynames = c("HYBAS_ID", "HYBAS_ID", "BIOME_NAME"),
test_biog = c("bracatus", "speciesGeo"),
biog_details = c("pval" = 0.95))
View(spx_biog)
# Cargar funciones de los modulos
source("R/funciones_limpieza.R")
library(data.table)
library(sf)
library(terra)
library(speciesgeocodeR)
library(bRacatus)
library(dplyr)
envars <- list.files("envars/", ".tif", full.names = T) |> rast()
do.corr.envars(envars = envars)
load("registros/subset16.RData")
spx <- subset16[acceptedNameUsage == "Acacia decurrens"]
rm(subset16);gc()
rm(subset16);gc()
# 2. aplicar modulo geografico: gazzeter y outliers
spx_geo <- do.geographic.label(data_base = spx, col_sp = "acceptedNameUsage", col_lon = "lon",
col_lat = "lat", gazzeters = T, outliers = T)
# 3. aplicar modulo ambiental: univariado y multivariado
spx_amb <- do.environmental.label(env = envars, data_base = spx, col_lon = "lon", col_lat = "lat",
univar = T, multivar = T)
# leer las capas biogeograficas que se desean trabajar
hybas3 <- sf::read_sf("biogeographic/hybas_sa_lev03_v1c.shp")
hybas5 <- sf::read_sf("biogeographic/hybas_sa_lev05_v1c.shp")
bior <- sf::read_sf("biogeographic/bior164.shp")
# generar una lista y darle nombre a cada capa en la lista
list_bio <- list(hybas3, hybas5, bior); names(list_bio) <- c("hybas3", "hybas5", "bior")
spx_biog <- do.biogeographic.label(data_base = spx, col_sp = "acceptedNameUsage", col_lon = "lon",
col_lat = "lat", shapeLayers = list_bio,
polynames = c("HYBAS_ID", "HYBAS_ID", "BIOME_NAME"),
test_biog = c("bracatus", "speciesGeo"),
biog_details = c("pval" = 0.95))
View(spx_geo)
hybas3 <- sf::read_sf("biogeographic/hybas_sa_lev03_v1c.shp")
hybas5 <- sf::read_sf("biogeographic/hybas_sa_lev05_v1c.shp")
# leer las capas biogeograficas que se desean trabajar
hybas3 <- sf::read_sf("biogeographic/hybas_sa_lev03_v1c.shp")
hybas5 <- sf::read_sf("biogeographic/hybas_sa_lev05_v1c.shp")
# generar una lista y darle nombre a cada capa en la lista
list_bio <- list(hybas3, hybas5); names(list_bio) <- c("hybas3", "hybas5")
spx_biog <- do.biogeographic.label(data_base = spx, col_sp = "acceptedNameUsage", col_lon = "lon",
col_lat = "lat", shapeLayers = list_bio,
polynames = c("HYBAS_ID", "HYBAS_ID"),
test_biog = c("bracatus", "speciesGeo"),
biog_details = c("pval" = 0.95))
View(spx_amb)
View(spx_biog)
View(spx_biog)
