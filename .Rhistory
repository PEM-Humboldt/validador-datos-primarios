species = col_sp,
tests = test_gazz,
capitals_rad = 10000,
centroids_rad = 1000,
centroids_detail = "both",
inst_rad = 100,
range_rad = 1000,
country_refcol = "iso_a3",
value = "spatialvalid",
verbose = FALSE,
report = FALSE
)
gazz_results2 <- gazz_results[, (ncol(gazz_results)-length(test_gazz)):ncol(gazz_results)]
gazz_results <- ((!gazz_results2)*1) |> as.data.table()
do.geographic.label <- function(data_base, col_sp,  col_lon, col_lat, gazzeters = F, outliers = F,
test_gazz = c("capitals", "centroids", "equal", "gbif", "institutions",
"seas", "gbif", "zeros", "duplicates"),
test_ouliers = c("distance", "quantile", "mad"),
outliers_details = c(1000, 5, 5), thinning_res = 0.00833, mergeto_db = F,
spat_vect = F){
if(!require(CoordinateCleaner)) install.packages("CoordinateCleaner")
if(gazzeters == T){
gazz_results <- CoordinateCleaner::clean_coordinates(
x = data_base,
lon = col_lon,
lat = col_lat,
species = col_sp,
tests = test_gazz,
capitals_rad = 10000,
centroids_rad = 1000,
centroids_detail = "both",
inst_rad = 100,
range_rad = 1000,
country_refcol = "iso_a3",
value = "spatialvalid",
verbose = FALSE,
report = FALSE
)
gazz_results <- gazz_results[, (ncol(gazz_results)-length(test_gazz)):ncol(gazz_results)]
gazz_results <- ((!gazz_results)*1) |> as.data.table()
}
if(outliers == T){
outl_list <- list()
for(i in 1:length(test_ouliers)){
if(test_ouliers[i] == "distance") tdi = outliers_details[1]
if(test_ouliers[i] == "quantile") mltpl = outliers_details[2]
if(test_ouliers[i] ==  "mad") mltpl = outliers_details[3]
outl_i <- cc_outl(
x = data_base,
lon = col_lon,
lat = col_lat,
species = col_sp,
method = test_ouliers[i],
tdi = tdi,
mltpl = 5,
value = "flagged",
sampling_thresh = 0,
min_occs = 7,
thinning = T,
thinning_res = thinning_res,
verbose = F
) |> as.data.table()
outl_list[[i]] <- outl_i
}
outliers_results <- do.call(cbind, outl_list)
colnames(outliers_results) <- paste0("geo.", test_ouliers)
outliers_results <- ((!outliers_results)*1) |> as.data.table()
}
# if(exists("gazz_results") & !exists("outliers_results")){
#   results <- gazz_results
# }else if(!exists("gazz_results") & exists("outliers_results")){
#   results <- outliers_results
# }else if(exists("gazz_results") & exists("outliers_results")){
#   results <- cbind(gazz_results, outliers_results)
# }
return(gazz_results)
}
b <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = T, outliers = F)
View(b)
do.geographic.label <- function(data_base, col_sp,  col_lon, col_lat, gazzeters = F, outliers = F,
test_gazz = c("capitals", "centroids", "equal", "gbif", "institutions",
"seas", "gbif", "zeros", "duplicates"),
test_ouliers = c("distance", "quantile", "mad"),
outliers_details = c(1000, 5, 5), thinning_res = 0.00833, mergeto_db = F,
spat_vect = F){
if(!require(CoordinateCleaner)) install.packages("CoordinateCleaner")
if(gazzeters == T){
gazz_results <- CoordinateCleaner::clean_coordinates(
x = data_base,
lon = col_lon,
lat = col_lat,
species = col_sp,
tests = test_gazz,
capitals_rad = 10000,
centroids_rad = 1000,
centroids_detail = "both",
inst_rad = 100,
range_rad = 1000,
country_refcol = "iso_a3",
value = "spatialvalid",
verbose = FALSE,
report = FALSE
)
gazz_results <- gazz_results[, (ncol(gazz_results)-length(test_gazz)):ncol(gazz_results)]
gazz_results <- ((!gazz_results)*1) |> as.data.table()
}
if(outliers == T){
outl_list <- list()
for(i in 1:length(test_ouliers)){
if(test_ouliers[i] == "distance") tdi = outliers_details[1]
if(test_ouliers[i] == "quantile") mltpl = outliers_details[2]
if(test_ouliers[i] ==  "mad") mltpl = outliers_details[3]
outl_i <- cc_outl(
x = data_base,
lon = col_lon,
lat = col_lat,
species = col_sp,
method = test_ouliers[i],
tdi = tdi,
mltpl = 5,
value = "flagged",
sampling_thresh = 0,
min_occs = 7,
thinning = T,
thinning_res = thinning_res,
verbose = F
) |> as.data.table()
outl_list[[i]] <- outl_i
}
outliers_results <- do.call(cbind, outl_list)
colnames(outliers_results) <- paste0("geo.", test_ouliers)
outliers_results <- ((!outliers_results)*1) |> as.data.table()
}
if(exists("gazz_results") & !exists("outliers_results")){
results <- gazz_results
}else if(!exists("gazz_results") & exists("outliers_results")){
results <- outliers_results
}else if(exists("gazz_results") & exists("outliers_results")){
results <- cbind(gazz_results, outliers_results)
}
return(results)
}
do.geographic.label <- function(data_base, col_sp,  col_lon, col_lat, gazzeters = F, outliers = F,
test_gazz = c("capitals", "centroids", "equal", "gbif", "institutions",
"seas", "gbif", "zeros", "duplicates"),
test_ouliers = c("distance", "quantile", "mad"),
outliers_details = c(1000, 5, 5), thinning_res = 0.00833, mergeto_db = F,
spat_vect = F){
if(!require(CoordinateCleaner)) install.packages("CoordinateCleaner")
if(gazzeters == T){
gazz_results <- CoordinateCleaner::clean_coordinates(
x = data_base,
lon = col_lon,
lat = col_lat,
species = col_sp,
tests = test_gazz,
capitals_rad = 10000,
centroids_rad = 1000,
centroids_detail = "both",
inst_rad = 100,
range_rad = 1000,
country_refcol = "iso_a3",
value = "spatialvalid",
verbose = FALSE,
report = FALSE
)
gazz_results <- gazz_results[, (ncol(gazz_results)-length(test_gazz)):ncol(gazz_results)]
gazz_results <- ((!gazz_results)*1) |> as.data.table()
}
if(outliers == T){
outl_list <- list()
for(i in 1:length(test_ouliers)){
if(test_ouliers[i] == "distance") tdi = outliers_details[1]
if(test_ouliers[i] == "quantile") mltpl = outliers_details[2]
if(test_ouliers[i] ==  "mad") mltpl = outliers_details[3]
outl_i <- cc_outl(
x = data_base,
lon = col_lon,
lat = col_lat,
species = col_sp,
method = test_ouliers[i],
tdi = tdi,
mltpl = 5,
value = "flagged",
sampling_thresh = 0,
min_occs = 7,
thinning = T,
thinning_res = thinning_res,
verbose = F
) |> as.data.table()
outl_list[[i]] <- outl_i
}
outliers_results <- do.call(cbind, outl_list)
colnames(outliers_results) <- paste0("geo.", test_ouliers)
outliers_results <- ((!outliers_results)*1) |> as.data.table()
}
if(exists("gazz_results") & !exists("outliers_results")){
results <- gazz_results
}else if(!exists("gazz_results") & exists("outliers_results")){
results <- outliers_results
}else if(exists("gazz_results") & exists("outliers_results")){
results <- cbind(gazz_results, outliers_results)
}
return(results)
}
b <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = F, outliers = T)
View(b)
rm(subset16);gc()
library(data.table)
load("registros_demo/subset16.RData")
a <- subset16[acceptedNameUsage == "Acacia decurrens"]
rm(subset16);gc()
b <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = F, outliers = T)
do.geographic.label <- function(data_base, col_sp,  col_lon, col_lat, gazzeters = F, outliers = F,
test_gazz = c("capitals", "centroids", "equal", "gbif", "institutions",
"seas", "gbif", "zeros", "duplicates"),
test_ouliers = c("distance", "quantile", "mad"),
outliers_details = c(1000, 5, 5), thinning_res = 0.00833, mergeto_db = F,
spat_vect = F){
if(!require(CoordinateCleaner)) install.packages("CoordinateCleaner")
if(gazzeters == T){
gazz_results <- CoordinateCleaner::clean_coordinates(
x = data_base,
lon = col_lon,
lat = col_lat,
species = col_sp,
tests = test_gazz,
capitals_rad = 10000,
centroids_rad = 1000,
centroids_detail = "both",
inst_rad = 100,
range_rad = 1000,
country_refcol = "iso_a3",
value = "spatialvalid",
verbose = FALSE,
report = FALSE
)
gazz_results <- gazz_results[, (ncol(gazz_results)-length(test_gazz)):ncol(gazz_results)]
gazz_results <- ((!gazz_results)*1) |> as.data.table()
}
if(outliers == T){
outl_list <- list()
for(i in 1:length(test_ouliers)){
if(test_ouliers[i] == "distance") tdi = outliers_details[1]
if(test_ouliers[i] == "quantile") mltpl = outliers_details[2]
if(test_ouliers[i] ==  "mad") mltpl = outliers_details[3]
outl_i <- cc_outl(
x = data_base,
lon = col_lon,
lat = col_lat,
species = col_sp,
method = test_ouliers[i],
tdi = tdi,
mltpl = 5,
value = "flagged",
sampling_thresh = 0,
min_occs = 7,
thinning = T,
thinning_res = thinning_res,
verbose = F
) |> as.data.table()
outl_list[[i]] <- outl_i
}
outliers_results <- do.call(cbind, outl_list)
colnames(outliers_results) <- paste0("geo.", test_ouliers)
outliers_results <- ((!outliers_results)*1) |> as.data.table()
}
if(exists("gazz_results") & !exists("outliers_results")){
results <- gazz_results
}else if(!exists("gazz_results") & exists("outliers_results")){
results <- outliers_results
}else if(exists("gazz_results") & exists("outliers_results")){
results <- cbind(gazz_results, outliers_results)
}
return(results)
}
b <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = F, outliers = T)
View(b)
b <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = T, outliers = F)
View(b)
b <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = T, outliers = T)
View(b)
library(sf)
gen.st.points <- function(dat, collon = col.lon, collat = col.lat) {
st.points <- dat %>%
dplyr::select(collon, collat) %>%
st_as_sf(coords = c(collon, collat), crs = st_crs("EPSG:4326")) %>%
st_transform(st_crs("EPSG:4326"))
}
a <- cbind(a, b)
aspat <- gen.st.points(a, collon = a$lon, collat = a$lat)
b <- cbind(a$lon, a$lat, b)
View(b)
aspat <- gen.st.points(a, collon = a[,1], collat = a[, 2])
b <- cbind(a$lon, a$lat, b) %>% as.data.frame()
View(b)
aspat <- gen.st.points(a, collon = a[,1], collat = a[, 2])
load("registros_demo/subset16.RData")
a <- subset16[acceptedNameUsage == "Acacia decurrens"]
rm(subset16);gc()
b <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = T, outliers = T)
b <- cbind(a$lon, a$lat, b) %>% as.data.frame()
View(b)
b <- cbind("lon" = a$lon, "lat" = a$lat, b) %>% as.data.frame()
b <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = T, outliers = T)
b <- cbind("lon" = a$lon, "lat" = a$lat, b) %>% as.data.frame()
fwrite(b, "b.csv", row.names = T)
fwrite(b, "b.csv", row.names = F)
st.points <- b |>
dplyr::select(lon, lat)
View(st.points)
st.points <- b |>
dplyr::select(lon, lat) %>%
st_as_sf(coords = c(collon, collat), crs = st_crs("EPSG:4326"))
st.points <- b |>
dplyr::select(lon, lat) %>%
st_as_sf(coords = c(lon, lat), crs = st_crs("EPSG:4326")) %>%
st_transform(st_crs("EPSG:4326"))
st.points <- b |>
dplyr::select(lon, lat) %>%
st_as_sf(coords = c("lon", "lat"), crs = st_crs("EPSG:4326")) %>%
st_transform(st_crs("EPSG:4326"))
plot(st.points)
write_sf(st.points, "b.shp")
st.points
st.points <- b |>
st_as_sf(coords = c("lon", "lat"), crs = st_crs("EPSG:4326")) %>%
st_transform(st_crs("EPSG:4326"))
write_sf(st.points, "b.shp", delete_layer = T)
rm(st.points)
rm(F)
rm(b);gc()
a_geo <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = T, outliers = T)
a <- cbind(a, a_geo);rm(a_geo)
View(a)
load("registros_demo/subset16.RData")
a <- subset16[acceptedNameUsage == "Acacia decurrens"]
rm(b);gc()
rm(subset16);gc()
a_geo <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = F, outliers = T)
a <- cbind(a, a_geo);rm(a_geo)
View(a)
do.geographic.label <- function(data_base, col_sp,  col_lon, col_lat, gazzeters = F, outliers = F,
test_gazz = c("capitals", "centroids", "equal", "gbif", "institutions",
"seas", "gbif", "zeros", "duplicates"),
test_ouliers = c("distance", "quantile", "mad"),
outliers_details = c(1000, 5, 5), thinning_res = 0.0833, mergeto_db = F){
if(!require(CoordinateCleaner)) install.packages("CoordinateCleaner")
if(gazzeters == T){
gazz_results <- CoordinateCleaner::clean_coordinates(
x = data_base,
lon = col_lon,
lat = col_lat,
species = col_sp,
tests = test_gazz,
capitals_rad = 10000,
centroids_rad = 1000,
centroids_detail = "both",
inst_rad = 100,
range_rad = 1000,
country_refcol = "iso_a3",
value = "spatialvalid",
verbose = FALSE,
report = FALSE
)
gazz_results <- gazz_results[, (ncol(gazz_results)-length(test_gazz)):ncol(gazz_results)]
gazz_results <- ((!gazz_results)*1) |> as.data.table()
}
if(outliers == T){
outl_list <- list()
for(i in 1:length(test_ouliers)){
if(test_ouliers[i] == "distance") tdi = outliers_details[1]
if(test_ouliers[i] == "quantile") mltpl = outliers_details[2]
if(test_ouliers[i] ==  "mad") mltpl = outliers_details[3]
outl_i <- cc_outl(
x = data_base,
lon = col_lon,
lat = col_lat,
species = col_sp,
method = test_ouliers[i],
tdi = tdi,
mltpl = 5,
value = "flagged",
sampling_thresh = 0,
min_occs = 7,
thinning = T,
thinning_res = thinning_res,
verbose = F
) |> as.data.table()
outl_list[[i]] <- outl_i
}
outliers_results <- do.call(cbind, outl_list)
colnames(outliers_results) <- paste0("geo.", test_ouliers)
outliers_results <- ((!outliers_results)*1) |> as.data.table()
}
if(exists("gazz_results") & !exists("outliers_results")){
results <- gazz_results
}else if(!exists("gazz_results") & exists("outliers_results")){
results <- outliers_results
}else if(exists("gazz_results") & exists("outliers_results")){
results <- cbind(gazz_results, outliers_results)
}
return(results)
}
a_geo <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = F, outliers = T)
a <- cbind(a, a_geo);rm(a_geo)
View(a)
load("registros_demo/subset16.RData")
a <- subset16[acceptedNameUsage == "Acacia decurrens"]
rm(subset16);gc()
a_geo <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = F, outliers = T)
a <- cbind(a, a_geo);rm(a_geo)
library(terra)
envars <- rast("envars/")
envars <- list.files("envars/", "*.tif$")
envars <- list.files("envars/", ".tif")
envars <- list.files("envars/", ".tif") |> rast()
envars <- list.files("envars/", ".tif", full.names = T) |> rast()
plot(envars)
View(a)
do.corr.envars <- function(envars = envars, sample_size = 10000){
if(!require(terra)) install.packages("terra")
sample_env <- terra::spatSample(envars, size = 10000, method = "random", replace = F, na.rm = T,
as.points= T)
}
do.corr.envars <- function(envars = envars, sample_size = 10000){
if(!require(terra)) install.packages("terra")
sample_envars <- terra::spatSample(envars, size = 10000, method = "random", replace = F, na.rm = T,
as.points= F, )
}
do.corr.envars <- function(envars = envars, sample_size = 10000){
if(!require(terra)) install.packages("terra")
sample_envars <- terra::spatSample(envars, size = 10000, method = "random", replace = F, na.rm = T,
as.df= T, )
}
a <- do.corr.envars()
do.corr.envars <- function(envars = envars, sample_size = 10000){
if(!require(terra)) install.packages("terra")
sample_envars <- terra::spatSample(envars, size = 10000, method = "random", replace = F, na.rm = T,
as.df= T)
}
c <- do.corr.envars()
sample_envars <- terra::spatSample(envars, size = 10000, method = "random", replace = F, na.rm = T,
as.df= T)
View(sample_envars)
do.corr.envars <- function(envars = envars, sample_size = 10000){
if(!require(terra)) install.packages("terra")
sample_envars <- terra::spatSample(envars, size = 10000, method = "random", replace = F, na.rm = T,
as.df= T)
}
c <- do.corr.envars()
c <- do.corr.envars(envars = envars)
View(c)
rm(sample_envars)
c <- do.corr.envars(envars = envars) |> cor()
c
do.corr.envars <- function(envars = envars, sample_size = 10000){
if(!require(terra)) install.packages("terra")
sample_envars <- terra::spatSample(envars, size = 10000, method = "random", replace = F, na.rm = T,
as.df= T)
correlacion <- sample_envars |> cor()
}
do.corr.envars()
do.corr.envars(envars = envars)
do.corr.envars <- function(envars = envars, sample_size = 10000){
if(!require(terra)) install.packages("terra")
sample_envars <- terra::spatSample(envars, size = 10000, method = "random", replace = F, na.rm = T,
as.df= T)
correlacion <- sample_envars |> cor()
return(correlacion)
}
do.corr.envars(envars = envars)
#
envars <- list.files("envars/", ".tif", full.names = T) |> rast()
envars
#
envars <- list.files("envars/", ".tif", full.names = T) |> rast()
do.corr.envars(envars = envars)
rm(c)
rm(F)
# aplicación piloto:
source("R/funciones_limpieza.R")
# Cargar funciones de los modulos
source("R/funciones_limpieza.R")
library(data.table)
library(sf)
library(terra)
envars <- list.files("envars/", ".tif", full.names = T) |> rast()
do.corr.envars(envars = envars)
# 1. cargar registros
load("registros_demo/subset16.RData")
spx <- subset16[acceptedNameUsage == "Acacia decurrens"]
rm(subset16);gc()
# 2. aplicar modulo geografico: gazzeter y outliers (geograficos)
spx_geo <- do.geographic.label(data_base = a, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = F, outliers = T)
# 2. aplicar modulo geografico: gazzeter y outliers (geograficos)
spx_geo <- do.geographic.label(data_base = spx, col_sp = "acceptedNameUsage", col_lon = "lon", col_lat = "lat",
gazzeters = F, outliers = T)
View(envars)
